<?php

namespace Tests\Feature;

use App\Models\Role;
use App\Models\User;
use Illuminate\Support\Facades\Notification;
use Tests\TestCase;

use Illuminate\Foundation\Testing\DatabaseTransactions;

class UserTest extends TestCase
{

    // to avoid refresh db 
    use DatabaseTransactions; 

    protected $user;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        Role::create(['name' => 'admin']);
        Role::create(['name' => 'operator']);

        // added to create other users
        User::create(['name' => 'Roberto', 'email' => 'r@r.it', 'password' => 'xxx', 'role_id' => 1]); 
        // added to create other users
        User::create(['name' => 'Matteo', 'email' => 'm@m.it', 'password' => 'xxx', 'role_id' => 2]);

        $this->user = factory(User::class)->create(['role_id' => 2]);
    }

    /**
     * A basic test example.
     *
     * @return void
     */
    public function test_a_guest_cant_create_new_user()
    {
        $this->setRole(2);

        $this->actingAs($this->user);

        $response = $this->post('/user', [
            'name' => 'Andrea',
            'email' => 'a@a.it',
            'password' => 'test',
            'role_id' => '1'
        ]);

        $response->assertUnauthorized();
    }

    /**
     * A basic test example.
     *
     * @return void
     */
    public function test_a_admin_can_create_new_user()
    {
        $this->setRole(1);
        $this->actingAs($this->user);
        $this->assertTrue($this->user->isAdmin());

        $response = $this->post('/user', [
            'name' => 'Andrea',
            'email' => 'a@a.it',
            'password' => 'test',
            'role_id' => '1'
        ]);

        $response->assertOk();

        $this->assertEquals('User create correctly!', $response->getContent());
    }

    /**
     * A basic test example.
     *
     * @return void
     */
    public function test_a_admin_can_view_all_users()
    {
        $this->setRole(1);

        $this->actingAs($this->user);

        $response = $this->get('/user/showAll');
        $response
            ->assertSuccessful();
    }

    public function test_a_guest_cant_view_all_users()
    {

        $this->actingAs($this->user);
        $this->assertFalse($this->user->isAdmin());

        $response = $this->get('/user/showAll');

        $response->assertUnauthorized();
    }

    /**
     * A basic test example.
     *
     * @return void
     */
    public function test_a_admin_can_update_a_user()
    {
        $this->setRole(1);

        $this->actingAs($this->user);

        $response = $this->put('/user/' . $this->user->id, [
            'name' => 'Andrea'
        ]);

        $response
            ->assertOk();

        $this->assertEquals('User update correctly!', $response->getContent());

    }

    /**
     * A basic test example.
     *
     * @return void
     */
    public function test_a_user_can_update_own_profile()
    {

        $this->actingAs($this->user);

        $response = $this->put('/user/' . $this->user->id, [
            'name' => 'Andrea'
        ]);

        $response->assertOk();

    }

    /**
     * A basic test example.
     *
     * @return void
     */
    public function test_a_user_cant_update_other_profile()
    {

        $this->actingAs($this->user);
        $id = $this->user->id - 1; // chenged to - to select the correct other user

        $response = $this->put('/user/' . $id, [
            'name' => 'Andrea'
        ]);

        $response->assertUnauthorized();
    }

    public function test_a_user_can_view_own_profile()
    {

        $this->actingAs($this->user);

        $response = $this->get('/user/' . $this->user->id);

        $response->assertOk();

    }

    public function test_a_user_operator_cant_view_other_user_profile()
    {
        $this->actingAs($this->user);

        $response = $this->get('/user/1'); // user_id changed to select a existing user

        $response->assertUnauthorized();
    }

    /**
     * A basic test example.
     *
     * @return void
     */
    public function test_a_mail_send_when_user_update_our_password()
    {
        Notification::fake();
        $this->actingAs($this->user);
        $this->put('/user/' . $this->user->id, [
            'password' => 'asd'
        ]);

        Notification::assertSentTo($this->user, \App\Notifications\ChangePassword::class);
    }

    public function test_a_mail_not_send_when_user_update_our_name()
    {
        Notification::fake();
        $this->actingAs($this->user);
        $this->put('/user/' . $this->user->id, [
            'name' => 'asd'
        ]);

        Notification::assertNotSentTo($this->user, \App\Notifications\ChangePassword::class);
    }

    public function setRole($id)
    {
        $this->user->role_id = $id;
    }
}
